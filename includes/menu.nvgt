void actsmenu()
{
setupmenu(true, "menumus1.ogg");
m.add_item("Buy ingredients. You currently have " + convert_to_currency(cash) + " in cash.", "bgn");
m.add_item("Drink lemonade. You currently have " + fullcups + " filled cup" + (fullcups == 1 ? "" : "s") + ".", "dlm");
m.add_item("Make lemonade. You currently have " + cups + " empty cup" + (cups == 1 ? "" : "s") + ".", "mlm");
if(pitcherstat <= 0)
    m.add_item("Pour lemonade. You currently have 0 liters of lemonade in the pitcher.", "plm");
else if(pitcherstat <= 1)
    m.add_item("Pour lemonade. You currently have 1 liter of lemonade in the pitcher.", "plm");
else
    m.add_item("Pour lemonade. You currently have " + ceil(pitcherstat) + " liters of lemonade in the pitcher.", "plm");
m.add_item("Sell lemonade. You currently have " + soldcups + " sold cup" + (soldcups == 1 ? "" : "s") + ".", "slm");
m.add_item("back", "back");
m.intro_text = "Actions menu.";
m.set_focused_item(last_menu_index, false);
int mres=m.run();
last_menu_index = mres;
string bactem = m.get_selected_item_id();
if(mres==-1 || bactem=="back")
{
last_menu_index=0;
game();
}
if(bactem == "bgn")
{
last_menu_index=0;
buymenu();
}
if(bactem == "dlm")
{
    if(fullcups <= 0)
    {
m.fade_music();
        dlg("Error. You donâ€™t have any lemonade to drink. Please make and pour some first.");
        actsmenu();
    }
    double maxdrink = min(fullcups, ceil((maxhydration - hydration) / 100.0));
    if(maxdrink <= 0)
    {
m.fade_music();
        dlg("Error. You're already fully hydrated. You don't need to drink any more lemonade.");
        actsmenu();
    }
m.fade_music();
    vd.set_disallowed_chars("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ !@#$%^&*()[]{};:'\"\\|,.<>_?/+-=`~", false, "");
    string cupsinput = vd.input_box("", "How many cups of lemonade would you like to drink? Each cup of lemonade will increase your hydration by 1 to 5 percent.");
    if(cupsinput == "")
        actsmenu();
    double drinkcount = string_to_number(cupsinput);
    if(drinkcount <= 0)
    {
        dlg("Error. Invalid number of cups entered.");
        actsmenu();
    }
    if(drinkcount > maxdrink)
    {
        dlg("Error. You can't drink that many cups of lemonade.");
        actsmenu();
    }
    fullcups -= drinkcount;
double min_increase = 100.0;
double max_increase = 500.0;
double total_increase = 0;
double tmpcount = drinkcount;
while (tmpcount > 0)
{
double single = random(min_increase, max_increase);
total_increase += single;
tmpcount -= 1;
}
if (hydration + total_increase > maxhydration)
total_increase = maxhydration - hydration;
if (total_increase < 0) total_increase = 0;
hydration += total_increase;
double percent_increase = round((total_increase / maxhydration) * 100, 0);
    speak("Drinking " + drinkcount + " cup" + (drinkcount == 1 ? "" : "s") + " of lemonade. Please wait.");
    dlgplay("drinkcup" + random(1, 2) + ".ogg");
    dlg("Success. You drank " + drinkcount + " cup" + (drinkcount == 1 ? "" : "s") + " of lemonade. Your hydration has been increased by " + percent_increase + " percent.");
last_menu_index=0;
        actsmenu();
}
if(bactem == "mlm")
{
if(cups < 1 || lemons < 1 || sugars < 1 || waters < 1)
{
m.fade_music();
dlg("Error. You need at least one empty cup, 1 ripe lemon, 1 packet of sugar, and 1 liter of water to make lemonade.");
actsmenu();
}
m.fade_music();
vd.set_disallowed_chars("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ !@#$%^&*()[]{};:'\"\\|,.<>_?/+-=`~", false, "");
string input = vd.input_box("", "How many cups of lemonade would you like to make?");
if(input == "") actsmenu();
double cupcount = string_to_number(input);
if(cupcount <= 0 || cupcount > cups)
{
dlg("Error. Invalid cup count. You only have " + cups + " cup" + (cups == 1 ? "" : "s") + ".");
actsmenu();
}
double use_ices = string_to_number(vd.input_box("", "How many bags of ice would you like to use?"));
double use_lemons = string_to_number(vd.input_box("", "How many ripe lemons would you like to use?"));
if(use_lemons <= 0)
{
dlg("Error. You must use at least 1 ripe lemon to make this lemonade.");
actsmenu();
}
double use_salts = string_to_number(vd.input_box("", "How many packets of salt would you like to use?"));
double use_sugars = string_to_number(vd.input_box("", "How many packets of sugar would you like to use?"));
if(use_sugars <= 0)
{
dlg("Error. You must use at least 1 packet of sugar to make this lemonade.");
actsmenu();
}
double use_waters = string_to_number(vd.input_box("", "How many liters of water would you like to use?"));
if(use_waters <= 0)
{
dlg("Error. You must use at least 1 liter of water to make this lemonade.");
actsmenu();
}
string[] overuse;
if(use_ices > ices) overuse.insert_last("bags of ice");
if(use_lemons > lemons) overuse.insert_last("ripe lemons");
if(use_salts > salts) overuse.insert_last("packets of salt");
if(use_sugars > sugars) overuse.insert_last("packets of sugar");
if(use_waters > waters) overuse.insert_last("liters of water");
if(overuse.length() > 0)
{
string msg = format_list(overuse);
dlg("Error. You don't have enough " + msg + " to make that much lemonade.");
actsmenu();
}
string[] low = {};
if(use_lemons < cupcount) low.insert_last((cupcount - use_lemons) + " ripe lemon" + ((cupcount - use_lemons) == 1 ? "" : "s"));
if(use_sugars < cupcount) low.insert_last((cupcount - use_sugars) + " packet" + ((cupcount - use_sugars) == 1 ? "" : "s") + " of sugar");
if(use_waters < cupcount) low.insert_last((cupcount - use_waters) + " liter" + ((cupcount - use_waters) == 1 ? "" : "s") + " of water");
if(low.length() > 0)
{
string list = format_list(low);
dlg("Error. You must use at least " + cupcount + " of each required ingredient to make " + cupcount + " cup" + (cupcount == 1 ? "" : "s") + " of lemonade. You're short on " + list + ".");
actsmenu();
}
cups -= cupcount;
ices -= use_ices;
lemons -= use_lemons;
salts -= use_salts;
sugars -= use_sugars;
waters -= use_waters;
pitcher = 1;
pitcherstat += cupcount * 0.25;
speak("Mixing... Please wait.");
pool.play_stationary("makestart.ogg", false);
dlgplay("makeloop.ogg");
pool.play_stationary("makestop.ogg", false);
dlg("Success. You made " + cupcount + " cup" + (cupcount == 1 ? "" : "s") + " of lemonade and added it to the pitcher.");
last_menu_index = 0;
actsmenu();
}
if(bactem == "plm")
{
    if(pitcher < 1 || pitcherstat <= 0)
    {
m.fade_music();
        dlg("Error. The pitcher is currently empty. Please make some lemonade first to pour into a cup.");
        actsmenu();
    }
    double maxcups = floor(pitcherstat / 0.25);
    if(maxcups < 1)
    {
m.fade_music();
        dlg("Error. The pitcher doesn't have enough lemonade to pour a single cup.");
        actsmenu();
    }
m.fade_music();
vd.set_disallowed_chars("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ !@#$%^&*()[]{};:'\"\\|,.<>_?/+-=`~", false, "");
    string input = vd.input_box("", "How many cups would you like to pour from the pitcher?");
    if(input == "") actsmenu();
    double pourcount = string_to_number(input);
    if(pourcount <= 0) actsmenu();
    if(pourcount > maxcups)
    {
        dlg("Error. You can't pour more than " + maxcups + " cup" + (maxcups == 1 ? "" : "s") + " of lemonade out of the pitcher.");
        actsmenu();
    }
    pitcherstat -= pourcount * 0.25;
    fullcups += pourcount;
    if(pitcherstat <= 0)
    {
        pitcherstat = 0;
        pitcher = 0;
    }
speak("Pouring... Please wait.");
dlgplay("pourcup"+random(1 ,4)+".ogg");
    dlg("Success. You poured " + pourcount + " cup" + (pourcount == 1 ? "" : "s") + " of lemonade into sellable serving cups.");
last_menu_index=0;
        actsmenu();
}
if(bactem == "slm")
{
if(fullcups <= 0)
{
m.fade_music();
dlg("Error. You need at least one cup of lemonade made in order to sell it for cash.");
actsmenu();
}
m.fade_music();
vd.set_disallowed_chars("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ !@#$%^&*()[]{};:'\"\\|,.<>_?/+-=`~", false, "");
string cup_imp = vd.input_box("", "How many cups of lemonade would you like to sell? You currently have " + fullcups + " filled cup" + (fullcups == 1 ? "" : "s") + ".");
if(cup_imp == "")
actsmenu();
double qty = string_to_number(cup_imp);
if(qty <= 0 || qty > fullcups)
{
dlg("Error. Invalid number of cups entered.");
actsmenu();
}
string price = vd.input_box("", "What price would you like to sell each cup of lemonade for?");
if(price == "")
actsmenu();
double percup = string_to_number(price);
if(percup <= 0)
{
dlg("Error. Invalid price entered.");
actsmenu();
}
double total = percup * qty;
cash += total;
fullcups -= qty;
soldcups+=qty;
pool.play_stationary("buy" + random(1, 4) + ".ogg", false);
dlg("Success. You sold " + qty + " cup" + (qty == 1 ? "" : "s") + " of lemonade for " + convert_to_currency(total) + ".");
    clocktime += 4;
    level += 1;
    if(level > 6)
    {
string report = "Daily summary for " + business_name + ".\r\n";
report += "For the date of " + dayname + ", " + monthname + daynumber + ", you ended with a total of " + convert_to_currency(cash) + " in cash.\r\n";
report += "You sold a total of " + soldcups + " cup" + (soldcups == 1 ? "" : "s") + " of lemonade.\r\n";
report += "Your inventory had the folowing items:\r\n";
report += "- Empty cups: " + cups + "\r\n";
report += "- Bags of ice: " + ices + "\r\n";
report += "- Ripe lemons: " + lemons + "\r\n";
report += "- Packets of salt: " + salts + "\r\n";
report += "- Packets of sugar: " + sugars + "\r\n";
report += "- Liters of water: " + waters + "\r\n";
if(pitcherstat > 0)
    report += "You also had " + ceil(pitcherstat) + " liters of lemonade in your pitcher.";
else
    report += "Your pitcher is now empty.";
dlgmessage(report);
soldcups=0;
daynumber += 1;
current_day_index = (current_day_index + 1) % daynames.length();
dayname = daynames[current_day_index];
bool month_has_31 = (current_month_index == 0 || current_month_index == 2 || current_month_index == 4 || current_month_index == 6 || current_month_index == 7 || current_month_index == 9 || current_month_index == 11);
int max_days = month_has_31 ? 31 : 30;
if(daynumber > max_days)
{
daynumber = 1;
current_month_index = (current_month_index + 1) % monthnames.length();
monthname = monthnames[current_month_index];
}
clocktime = 0;
        level = 1;
setupmenu(false);
        m.add_item("Copy daily summery to clipboard", "copy");
        m.add_item("Export daily summery to file", "export");
        m.add_item("Return to the game.", "cancel");
        m.intro_text = "What would you like to do with the current daily summery for this game session?";
        int res = m.run();
        string choice = m.get_selected_item_id();
        if (res != -1)
        {
            if (choice == "copy")
            {
                clipboard_copy_text(report);
                dlg("Your daily summery has been copied to your clipboard.");
    int daily_min = clamp(20 + daynumber * 1, 20, 90);
int daily_max = clamp(70 + daynumber * 2, 70, 120);
if(level == 1)
    temprature = random(daily_min, daily_min + 5);
else if(level == 2)
    temprature = random(daily_min + 5, daily_min + 15);
else if(level == 3)
    temprature = random(daily_min + 15, daily_max - 15);
else if(level == 4)
    temprature = random(daily_max - 10, daily_max);
else if(level == 5)
    temprature = random(daily_max - 20, daily_max - 5);
else
    temprature = random(daily_min + 5, daily_min + 15);
double daily_base = temprature - 60;
double percent = daily_base * 0.005 + level * 0.01 + daynumber * 0.005;
percent = clamp(percent, 0.01, 0.1);
double rounded_percent = round(percent * 100, 0);
double hydration_loss = (rounded_percent / 100.0) * maxhydration;
hydration = max(hydration - hydration_loss, 0);
cupcost   = 1 * level * daynumber;
icecost   = 2 * level * daynumber;
lemoncost = 3 * level * daynumber;
saltcost  = 4 * level * daynumber;
sugarcost = 5 * level * daynumber;
watercost = 6 * level * daynumber;
last_menu_index=0;
                game();
            }
            else if (choice == "export")
            {
                file poastfile;
                poastfile.open(DIRECTORY_APPDATA + "tsatria03/ClassicStand/data/stats/daily_summeries.txt", "a");
                poastfile.write("\r\n\r\n"+report);
                poastfile.close();
                dlg("Your daily summery has been exported to data/stats/daily_summeries.txt.");
    int daily_min = clamp(20 + daynumber * 1, 20, 90);
int daily_max = clamp(70 + daynumber * 2, 70, 120);
if(level == 1)
    temprature = random(daily_min, daily_min + 5);
else if(level == 2)
    temprature = random(daily_min + 5, daily_min + 15);
else if(level == 3)
    temprature = random(daily_min + 15, daily_max - 15);
else if(level == 4)
    temprature = random(daily_max - 10, daily_max);
else if(level == 5)
    temprature = random(daily_max - 20, daily_max - 5);
else
    temprature = random(daily_min + 5, daily_min + 15);
double daily_base = temprature - 60;
double percent = daily_base * 0.005 + level * 0.01 + daynumber * 0.005;
percent = clamp(percent, 0.01, 0.1);
double rounded_percent = round(percent * 100, 0);
double hydration_loss = (rounded_percent / 100.0) * maxhydration;
hydration = max(hydration - hydration_loss, 0);
cupcost   = 1 * level * daynumber;
icecost   = 2 * level * daynumber;
lemoncost = 3 * level * daynumber;
saltcost  = 4 * level * daynumber;
sugarcost = 5 * level * daynumber;
watercost = 6 * level * daynumber;
last_menu_index=0;
game();
            }
        }
    }
    int daily_min = clamp(20 + daynumber * 1, 20, 90);
int daily_max = clamp(70 + daynumber * 2, 70, 120);
if(level == 1)
    temprature = random(daily_min, daily_min + 5);
else if(level == 2)
    temprature = random(daily_min + 5, daily_min + 15);
else if(level == 3)
    temprature = random(daily_min + 15, daily_max - 15);
else if(level == 4)
    temprature = random(daily_max - 10, daily_max);
else if(level == 5)
    temprature = random(daily_max - 20, daily_max - 5);
else
    temprature = random(daily_min + 5, daily_min + 15);
double daily_base = temprature - 60;
double percent = daily_base * 0.005 + level * 0.01 + daynumber * 0.005;
percent = clamp(percent, 0.01, 0.1);
double rounded_percent = round(percent * 100, 0);
double hydration_loss = (rounded_percent / 100.0) * maxhydration;
hydration = max(hydration - hydration_loss, 0);
cupcost   = 1 * level * daynumber;
icecost   = 2 * level * daynumber;
lemoncost = 3 * level * daynumber;
saltcost  = 4 * level * daynumber;
sugarcost = 5 * level * daynumber;
watercost = 6 * level * daynumber;
last_menu_index=0;
game();
}
}
void buymenu()
{
setupmenu(true, "menumus1.ogg");
m.add_item("bundled ingredients", "bgs");
m.add_item("single ingredients", "sgs");
m.add_item("back", "back");
m.intro_text = "Ingredients menu.";
m.set_focused_item(last_menu_index, false);
int mres=m.run();
last_menu_index = mres;
string buyem = m.get_selected_item_id();
if(mres==-1 || buyem == "back")
{
last_menu_index=0;
actsmenu();
}
if(buyem == "bgs")
{
last_menu_index=0;
buybmenu();
}
if(buyem == "sgs")
{
last_menu_index=0;
buysmenu();
}
}
void buybmenu()
{
setupmenu(true, "menumus1.ogg");
double booth_cost     = ((cupcost + lemoncost + sugarcost + watercost) * 4) / 6;
m.add_item("Booth bundle: costs " + convert_to_currency(booth_cost) + ". This ingredient bundle contains 4 empty cups, 4 ripe lemons, 4 packets of sugar, and 4 liters of water. Ice and salt is optional.", "tbl");
double community_cost = ((cupcost + lemoncost + sugarcost + watercost) * 8) / 6;
m.add_item("Community bundle: costs " + convert_to_currency(community_cost) + ". This ingredient bundle contains 8 empty cups, 8 ripe lemons, 8 packets of sugar, and 8 liters of water. Ice and salt is optional.", "cbl");
double carnival_cost  = ((cupcost + lemoncost + sugarcost + watercost) * 12) / 6;
m.add_item("Carnival bundle: costs " + convert_to_currency(carnival_cost) + ". This ingredient bundle contains 12 empty cups, 12 ripe lemons, 12 packets of sugar, and 12 liters of water. Ice and salt is optional.", "rbl");
double festival_cost  = ((cupcost + lemoncost + sugarcost + watercost) * 16) / 6;
m.add_item("Festival bundle: costs " + convert_to_currency(festival_cost) + ". This ingredient bundle contains 16 empty cups, 16 ripe lemons, 16 packets of sugar, and 16 liters of water. Ice and salt is optional.", "fbl");
double market_cost    = ((cupcost + lemoncost + sugarcost + watercost) * 20) / 6;
m.add_item("Market bundle: costs " + convert_to_currency(market_cost) + ". This ingredient bundle contains 20 empty cups, 20 ripe lemons, 20 packets of sugar, and 20 liters of water. Ice and salt is optional.", "mbl");
double parade_cost    = ((cupcost + lemoncost + sugarcost + watercost) * 24) / 6;
m.add_item("Parade bundle: costs " + convert_to_currency(parade_cost) + ". This ingredient bundle contains 24 empty cups, 24 ripe lemons, 24 packets of sugar, and 24 liters of water. Ice and salt is optional.", "pbl");
m.add_item("back", "back");
m.intro_text = "Bundled ingredients menu.";
m.set_focused_item(last_menu_index, false);
int mres = m.run();
last_menu_index = mres;
string buybem = m.get_selected_item_id();
if (mres == -1 || buybem == "back")
{
last_menu_index = 0;
buymenu();
}
if (buybem == "tbl")
{
m.fade_music();
purchase_ingredient_bundle("tbl", "booth", 4);
}
if (buybem == "cbl")
{
m.fade_music();
purchase_ingredient_bundle("cbl", "community", 8);
}
if (buybem == "rbl")
{
m.fade_music();
purchase_ingredient_bundle("rbl", "carnival", 12);
}
if (buybem == "fbl")
{
m.fade_music();
purchase_ingredient_bundle("fbl", "festival", 16);
}
if (buybem == "mbl")
{
m.fade_music();
purchase_ingredient_bundle("mbl", "market", 20);
}
if (buybem == "pbl")
{
m.fade_music();
purchase_ingredient_bundle("pbl", "parade", 24);
}
}
void buysmenu()
{
setupmenu(true, "menumus1.ogg");
m.add_item("Cup: costs " + convert_to_currency(cupcost) + ". You have " + cups + " empty cup" + (cups == 1 ? "" : "s"), "cps");
m.add_item("Ice: costs " + convert_to_currency(icecost) + ". You have " + ices + " bag" + (ices == 1 ? "" : "s") + " of ice", "ics");
m.add_item("Lemon: costs " + convert_to_currency(lemoncost) + ". You have " + lemons + " ripe lemon" + (lemons == 1 ? "" : "s"), "lms");
m.add_item("Salt: costs " + convert_to_currency(saltcost) + ". You have " + salts + " packet" + (salts == 1 ? "" : "s") + " of salt", "slt");
m.add_item("Sugar: costs " + convert_to_currency(sugarcost) + ". You have " + sugars + " packet" + (sugars == 1 ? "" : "s") + " of sugar", "sgr");
m.add_item("Water: costs " + convert_to_currency(watercost) + ". You have " + waters + " liter" + (waters == 1 ? "" : "s") + " of water", "swr");
m.add_item("back", "back");
m.intro_text = "Single ingredients menu.";
m.set_focused_item(last_menu_index, false);
int mres=m.run();
last_menu_index = mres;
string buyem = m.get_selected_item_id();
if(mres==-1 || buyem=="back")
{
last_menu_index=0;
buymenu();
}
if(buyem== "cps")
{
m.fade_music();
vd.set_disallowed_chars("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ !@#$%^&*()[]{};:'\"\\|,.<>_?/+-=`~", false, "");
    string cup = vd.input_box("", "How many empty cups would you like to buy?");
    if(cup == "")
        buysmenu();
    double qty = string_to_number(cup);
    if(qty <= 0)
        buysmenu();
    double total = qty * cupcost;
    if(cash < total)
    {
        dlg("Error. You don't have enough cash to purchase " + qty + " empty cup" + (qty == 1 ? "" : "s") + ".");
        buysmenu();
    }
    cups += qty;
    cash -= total;
pool.play_stationary("buycup" + random(1, 2) + ".ogg", false);
    pool.play_stationary("buy" + random(1, 4) + ".ogg", false);
dlg("Purchase complete. You bought " + qty + " empty cup" + (qty == 1 ? "" : "s") + " for " + convert_to_currency(total) + ". You now have " + convert_to_currency(cash) + " in cash remaining.");
        buysmenu();
}
if(buyem== "ics")
{
m.fade_music();
vd.set_disallowed_chars("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ !@#$%^&*()[]{};:'\"\\|,.<>_?/+-=`~", false, "");
    string ice = vd.input_box("", "How many bags of ice would you like to buy?");
    if(ice == "")
        buysmenu();
    double qty = string_to_number(ice);
    if(qty <= 0)
        buysmenu();
    double total = qty * icecost;
    if(cash < total)
    {
dlg("Error. You don't have enough cash to purchase " + qty + " bag" + (qty == 1 ? "" : "s") + " of ice.");
        buysmenu();
    }
    ices += qty;
    cash -= total;
pool.play_stationary("buybag" + random(1, 4) + ".ogg", false);
    pool.play_stationary("buy" + random(1, 4) + ".ogg", false);
dlg("Purchase complete. You bought " + qty + " bag" + (qty == 1 ? "" : "s") + " of ice for " + convert_to_currency(total) + ". You now have " + convert_to_currency(cash) + " in cash remaining.");
        buysmenu();
}
if(buyem== "lms")
{
m.fade_music();
vd.set_disallowed_chars("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ !@#$%^&*()[]{};:'\"\\|,.<>_?/+-=`~", false, "");
    string lemon = vd.input_box("", "How many ripe lemons would you like to buy?");
    if(lemon == "")
        buysmenu();
    double qty = string_to_number(lemon);
    if(qty <= 0)
        buysmenu();
    double total = qty * lemoncost;
    if(cash < total)
    {
        dlg("Error. You don't have enough cash to purchase " + qty + " ripe lemon" + (qty == 1 ? "" : "s") + ".");
        buysmenu();
    }
    lemons += qty;
    cash -= total;
pool.play_stationary("buyfruit" + random(1, 2) + ".ogg", false);
    pool.play_stationary("buy" + random(1, 4) + ".ogg", false);
dlg("Purchase complete. You bought " + qty + " ripe lemon" + (qty == 1 ? "" : "s") + " for " + convert_to_currency(total) + ". You now have " + convert_to_currency(cash) + " in cash remaining.");
        buysmenu();
}
if(buyem== "slt")
{
m.fade_music();
vd.set_disallowed_chars("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ !@#$%^&*()[]{};:'\"\\|,.<>_?/+-=`~", false, "");
    string salt = vd.input_box("", "How many packets of salt would you like to buy?");
    if(salt == "")
        buysmenu();
    double qty = string_to_number(salt);
    if(qty <= 0)
        buysmenu();
    double total = qty * saltcost;
    if(cash < total)
    {
dlg("Error. You don't have enough cash to purchase " + qty + " packet" + (qty == 1 ? "" : "s") + " of salt.");
        buysmenu();
    }
    salts += qty;
    cash -= total;
pool.play_stationary("buypack" + random(1, 2) + ".ogg", false);
    pool.play_stationary("buy" + random(1, 4) + ".ogg", false);
dlg("Purchase complete. You bought " + qty + " packet" + (qty == 1 ? "" : "s") + " of salt for " + convert_to_currency(total) + ". You now have " + convert_to_currency(cash) + " in cash remaining.");
        buysmenu();
}
if(buyem== "sgr")
{
m.fade_music();
vd.set_disallowed_chars("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ !@#$%^&*()[]{};:'\"\\|,.<>_?/+-=`~", false, "");
    string sugar = vd.input_box("", "How many packets of sugar would you like to buy?");
    if(sugar == "")
        buysmenu();
    double qty = string_to_number(sugar);
    if(qty <= 0)
        buysmenu();
    double total = qty * sugarcost;
    if(cash < total)
    {
dlg("Error. You don't have enough cash to purchase " + qty + " packet" + (qty == 1 ? "" : "s") + " of sugar.");
        buysmenu();
    }
    sugars += qty;
    cash -= total;
pool.play_stationary("buypack" + random(1, 2) + ".ogg", false);
    pool.play_stationary("buy" + random(1, 4) + ".ogg", false);
dlg("Purchase complete. You bought " + qty + " packet" + (qty == 1 ? "" : "s") + " of sugar for " + convert_to_currency(total) + ". You now have " + convert_to_currency(cash) + " in cash remaining.");
        buysmenu();
}
if(buyem== "swr")
{
m.fade_music();
vd.set_disallowed_chars("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ !@#$%^&*()[]{};:'\"\\|,.<>_?/+-=`~", false, "");
    string water = vd.input_box("", "How many liters of water would you like to buy?");
    if(water == "")
        buysmenu();
    double qty = string_to_number(water);
    if(qty <= 0)
        buysmenu();
    double total = qty * watercost;
    if(cash < total)
    {
dlg("Error. You don't have enough cash to purchase " + qty + " liter" + (qty == 1 ? "" : "s") + " of water.");
        buysmenu();
    }
    waters += qty;
    cash -= total;
pool.play_stationary("buywater" + random(1, 2) + ".ogg", false);
    pool.play_stationary("buy" + random(1, 4) + ".ogg", false);
dlg("Purchase complete. You bought " + qty + " liter" + (qty == 1 ? "" : "s") + " of water for " + convert_to_currency(total) + ". You now have " + convert_to_currency(cash) + " in cash remaining.");
        buysmenu();
}
}
void infomenu()
{
setupmenu(true, "menumus2.ogg");
m.add_item("Business title: "+business_name+". Press enter to change.", "bst");
m.add_item("Date: "+dayname+", "+monthname+daynumber);
int hour = clocktime % 24;
string hour_period = (hour >= 12 && hour < 24) ? "PM" : "AM";
int display_hour = hour % 12;
if(display_hour == 0) display_hour = 12;
m.add_item("Time: " + display_hour + hour_period + ". Level "+level+" of "+maxlevel+".");
double celsius = round((temprature - 32) * 5 / 9, 0);
m.add_item("Temperature: " + temprature + " degrees Fahrenheit, " + celsius + " degrees Celsius.");
m.add_item("Cash: " + convert_to_currency(cash));
m.add_item("filled cups: " + fullcups);
m.add_item("sold cups: " + soldcups);
double hydration_percent = round(hydration / maxhydration * 100, 0);
string status;
if(hydration_percent >= 100)
status = "Fully hydrated.";
else if(hydration_percent >= 75)
status = "Slightly thirsty.";
else if(hydration_percent >= 50)
status = "Thirsty.";
else if(hydration_percent >= 25)
status = "Very thirsty.";
else
status = "Critically dehydrated!";
m.add_item("Hydration status: " + hydration_percent + " percent. " + status);
if(pitcherstat <= 0)
    m.add_item("Pitcher status: 0 liters of lemonade.");
else if(pitcherstat <= 1)
    m.add_item("Pitcher status: 1 liter of lemonade.");
else
    m.add_item("Pitcher status: " + ceil(pitcherstat) + " liters of lemonade.");
m.add_item("back", "back");
m.intro_text = "Information menu.";
m.set_focused_item(last_menu_index, false);
int mres=m.run();
string infem = m.get_selected_item_id();
if(mres>=1 and mres<=8)
{
last_menu_index = mres;
infomenu();
}
if(mres==-1 || infem=="back")
{
last_menu_index=0;
m.fade_music();
game();
}
if(infem=="bst")
{
m.fade_music();
vd.set_disallowed_chars(" !@#$%^&*()[]{};:'\"\\|,.<>_?/+-=`~", false, "");
    string name = vd.input_box("", "What would you like your new Business title to be?");
    if(name == "") infomenu();
business_name=name;
dlg("Success. You're business title has now been changed to "+business_name+".");
last_menu_index=0;
infomenu();
}
}
void optsmenu()
{
setupmenu(true, "menumus2.ogg");
m.add_item("exit game", "ex");
m.add_item("reload game", "rgl");
m.add_item("reset game", "rgm");
m.add_item("restart game", "rgs");
m.add_item("save game", "sgm");
m.add_item("back", "back");
m.intro_text = "Options menu.";
m.set_focused_item(last_menu_index, false);
int mres=m.run();
last_menu_index = mres;
string opm = m.get_selected_item_id();
if(mres==-1 || opm=="back")
{
last_menu_index=0;
m.fade_music();
game();
}
if(opm=="ex")
{
    setupmenu(true, "menumus2.ogg");    
    m.add_item("Yes, quit the game without saving", "quit_no_save");
    m.add_item("Yes, save the game and then quit", "quit_save");
    m.add_item("No, continue playing", "continue");
    m.add_item("No, save the game, but continue playing", "save_continue");
m.intro_text = "Are you sure you want to quit? You will lose all progress for this current game session.";
int mres = m.run();
    if(mres==-1)
    {
last_menu_index=0;
optsmenu();
    }
if (m.get_selected_item_id() == "quit_no_save")
    {
        speak("Exiting the game without saving.");
m.fade_music();
exit();
    }
if (m.get_selected_item_id() == "quit_save")
    {
        writedata();
        speak("game saved, Exiting.");
m.fade_music();
exit();
    }
if (m.get_selected_item_id() == "continue")
    {
last_menu_index=0;
optsmenu();
    }
if (m.get_selected_item_id() == "save_continue")
    {
        writedata();
speak("game saved");
wait(500);
last_menu_index=0;
optsmenu();
    }
}
if(opm=="rgl")
{
readdata();
speak("game reloaded");
last_menu_index=0;
m.fade_music();
game();
}
if(opm=="rgm")
{
m.fade_music();
setupmenu(false);
    m.add_item("Yes", "yes");
    m.add_item("No", "no");
m.intro_text="Are you sure you want to reset all of your game's progress? This action can't be undone.";
int mres=m.run();
string confirm = m.get_selected_item_id();
    if (mres == -1 or confirm == "no")
    {
last_menu_index=0;
        optsmenu();
    }
if(confirm=="yes")
{
if(file_exists(DIRECTORY_APPDATA + "tsatria03/ClassicStand/data/saves/game.clm")) file_delete(DIRECTORY_APPDATA + "tsatria03/ClassicStand/data/saves/game.clm");
if(file_exists(DIRECTORY_APPDATA + "tsatria03/ClassicStand/data/stats/daily_summeries.txt")) file_delete(DIRECTORY_APPDATA + "tsatria03/ClassicStand/data/stats/daily_summeries.txt");
resetgame();
dlgmessage("Success. Your game progress has been reset. Press enter to restart the game.");
speak("restarting");
m.fade_music();
restart_game();
}
}
if(opm=="rgs")
{
speak("restarting");
m.fade_music();
restart_game();
}
if(opm=="sgm")
{
writedata();
speak("game saved");
last_menu_index=0;
m.fade_music();
game();
}
}
