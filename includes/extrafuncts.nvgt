bool alt_is_down()
{
if(key_down(KEY_LMENU) or key_down(KEY_RMENU))
{
return true;
}
return false;
}
bool control_is_down()
{
if(key_down(KEY_LCONTROL) or key_down(KEY_RCONTROL))
{
return true;
}
return false;
}
bool shift_is_down()
{
if(key_down(KEY_LSHIFT) or key_down(KEY_RSHIFT))
{
return true;
}
return false;
}
double clamp(double value, double min, double max)
{
value=value<min? min:value;
value=value>max? max:value;
return value;
}
double min(double a, double b)
{
return (a < b) ? a : b;
}
double max(double a, double b)
{
return (a > b) ? a : b;
}
string convert_to_currency(double number, string currency_symbol = "$")
{
if (number < 0) return "";
int64 num = int64(number + 0.5);
int64 dollars = num / 100;
int64 cents = num % 100;
if (dollars == 0)
return cents + " cent" + (cents == 1 ? "" : "s");
string cents_str = "" + cents;
if (string_len(cents_str) == 1) cents_str = "0" + cents_str;
return currency_symbol + dollars + "." + cents_str;
}
string format_list(string[] items)
{
if(items.length() == 1) return items[0];
if(items.length() == 2) return items[0] + " and " + items[1];
string result = "";
for(uint i = 0; i < items.length() - 1; i++)
result += items[i] + ", ";
return result + "and " + items[items.length() - 1];
}
void purchase_ingredient_bundle(string bundle_id, string bundle_name, double unit_qty)
{
vd.set_disallowed_chars("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ !@#$%^&*()[]{};:'\"\\|,.<>_?/+-=~", false, "");
string qty_input = vd.input_box("", "How many " + bundle_name + (bundle_name == "booth" ? " bundles" : " bundles") + " would you like to buy?");
if(qty_input == "")
{
buybmenu();
}
double qty = string_to_number(qty_input);
if(qty <= 0)
{
buybmenu();
}
setupmenu();
m.add_item("Yes", "yes");
m.add_item("No", "no");
m.intro_text = "Would you like to include " + unit_qty + " bags of ice with each bundle?";
int mres = m.run();
bool include_ice = m.get_selected_item_id() == "yes";
setupmenu();
m.add_item("Yes", "yes");
m.add_item("No", "no");
m.intro_text = "Would you like to include " + unit_qty + " packets of salt with each bundle?";
int mres2 = m.run();
bool include_salt = m.get_selected_item_id() == "yes";
double per_bundle = ((cupcost + lemoncost + sugarcost + watercost) * unit_qty) / 6;
if(include_ice)  per_bundle += icecost * unit_qty;
if(include_salt) per_bundle += saltcost * unit_qty;
double total = per_bundle * qty;
if(cash < total)
{
dlg("Error. You don't have enough cash to purchase " + qty + " " + bundle_name + " bundle" + (qty == 1 ? "" : "s") + " of supplies.");
buybmenu();
}
cash   -= total;
cups   += unit_qty * qty;
if(include_ice) ices += unit_qty * qty;
lemons += unit_qty * qty;
if(include_salt) salts += unit_qty * qty;
sugars += unit_qty * qty;
waters += unit_qty * qty;
pool.play_stationary("buycup" + random(1, 2) + ".ogg", false);
pool.play_stationary("buybag" + random(1, 4) + ".ogg", false);
pool.play_stationary("buyfruit" + random(1, 2) + ".ogg", false);
pool.play_stationary("buypack" + random(1, 2) + ".ogg", false);
pool.play_stationary("buywater" + random(1, 2) + ".ogg", false);
pool.play_stationary("buy" + random(1, 4) + ".ogg", false);
string msg = "Purchase complete. You bought " + qty + " " + bundle_name + " bundle" + (qty == 1 ? "" : "s") + " of supplies for " + convert_to_currency(total) + ".\r\n";
msg += "You received " + (unit_qty * qty) + " empty cups";
if(include_ice)  msg += ", " + (unit_qty * qty) + " bags of ice";
msg += ", " + (unit_qty * qty) + " ripe lemons";
if(include_salt) msg += ", " + (unit_qty * qty) + " packets of salt";
msg += ", " + (unit_qty * qty) + " packets of sugar";
msg += ", and " + (unit_qty * qty) + " liters of water.";
msg += "\r\nYou now have " + convert_to_currency(cash) + " in cash remaining.";
dlgmessage(msg);
buybmenu();
}
void restart_game(string appid="cst.exe", string scriptid="cst.nvgt")
{
if(SCRIPT_COMPILED)
{
bool success=run(appid,"",false,false);
if(!success)
{
alert("errorr", "Unable to restart "+appid+"!");
}
}
else
{
bool success=run("c:\\nvgt\\nvgtw.exe", scriptid,false,false);
if(!success)
{
alert("errorr", "Unable to restart "+scriptid+"!");
}
}
exit();
}
