bool alt_is_down()
{
if(key_down(KEY_LMENU) or key_down(KEY_RMENU))
{
return true;
}
return false;
}
bool control_is_down()
{
if(key_down(KEY_LCONTROL) or key_down(KEY_RCONTROL))
{
return true;
}
return false;
}
bool shift_is_down()
{
if(key_down(KEY_LSHIFT) or key_down(KEY_RSHIFT))
{
return true;
}
return false;
}
double clamp(double value, double min, double max)
{
value=value<min? min:value;
value=value>max? max:value;
return value;
}
double min(double a, double b)
{
return (a < b) ? a : b;
}
double max(double a, double b)
{
return (a > b) ? a : b;
}
string convert_to_currency(double number, string currency_symbol = "$")
{
if (number < 0) return "";
int64 num = int64(number + 0.5);
int64 dollars = num / 100;
int64 cents = num % 100;
if (dollars == 0)
return cents + " cent" + (cents == 1 ? "" : "s");
string cents_str = "" + cents;
if (string_len(cents_str) == 1) cents_str = "0" + cents_str;
return currency_symbol + dollars + "." + cents_str;
}
string format_list(string[] items)
{
if(items.length() == 1) return items[0];
if(items.length() == 2) return items[0] + " and " + items[1];
string result = "";
for(uint i = 0; i < items.length() - 1; i++)
result += items[i] + ", ";
return result + "and " + items[items.length() - 1];
}
void calculate_new_day_conditions()
{
int daily_min = clamp(20 + daynumber * 1, 20, 90);
int daily_max = clamp(70 + daynumber * 2, 70, 120);
if(level == 1)
temprature = random(daily_min, daily_min + 5);
else if(level == 2)
temprature = random(daily_min + 5, daily_min + 15);
else if(level == 3)
temprature = random(daily_min + 15, daily_max - 15);
else if(level == 4)
temprature = random(daily_max - 10, daily_max);
else if(level == 5)
temprature = random(daily_max - 20, daily_max - 5);
else
temprature = random(daily_min + 5, daily_min + 15);
cupcost   = 1 * level * daynumber;
icecost   = 2 * level * daynumber;
lemoncost = 3 * level * daynumber;
saltcost  = 4 * level * daynumber;
sugarcost = 5 * level * daynumber;
watercost = 6 * level * daynumber;
}
void generate_daily_summary()
{
    clocktime += 4;
    level += 1;
    if(level > 6)
    {
string report = "Daily summary for " + business_name + ".\r\n";
report += "For the date of " + dayname + ", " + monthname + daynumber + ", you ended with a total of " + convert_to_currency(cash) + " in cash.\r\n";
report += "You sold a total of " + soldcups + " cup" + (soldcups == 1 ? "" : "s") + " of lemonade.\r\n";
report += "Your inventory had the folowing items:\r\n";
report += "- Empty cups: " + cups + "\r\n";
report += "- Bags of ice: " + ices + "\r\n";
report += "- Ripe lemons: " + lemons + "\r\n";
report += "- Packets of salt: " + salts + "\r\n";
report += "- Packets of sugar: " + sugars + "\r\n";
report += "- Liters of water: " + waters + "\r\n";
if(pitcherstat > 0)
    report += "You also had " + ceil(pitcherstat) + " liters of lemonade in your pitcher.";
else
    report += "Your pitcher is now empty.";
dlgmessage(report);
wait(500);
soldcups=0;
daynumber += 1;
current_day_index = (current_day_index + 1) % daynames.length();
dayname = daynames[current_day_index];
bool month_has_31 = (current_month_index == 0 || current_month_index == 2 || current_month_index == 4 || current_month_index == 6 || current_month_index == 7 || current_month_index == 9 || current_month_index == 11);
int max_days = month_has_31 ? 31 : 30;
if(daynumber > max_days)
{
daynumber = 1;
current_month_index = (current_month_index + 1) % monthnames.length();
monthname = monthnames[current_month_index];
}
clocktime = 0;
        level = 1;
setupmenu(false, "");
        m.add_item("Copy daily summary to clipboard", "copy");
        m.add_item("Export daily summary to file", "export");
        m.add_item("Return to the game.", "cancel");
        m.intro_text = "What would you like to do with the current daily summary for this game session?";
        int res = m.run();
        string choice = m.get_item_id(res);
        if (res == -1 || choice=="cancel")
        {
calculate_new_day_conditions();
writedata();
dlgplay("savegame.ogg");
wait(200);
last_menu_id="";
game();
}
            if (choice == "copy")
            {
                clipboard_copy_text(report);
                dlg("Your daily summary has been copied to your clipboard.");
calculate_new_day_conditions();
writedata();
dlgplay("savegame.ogg");
wait(200);
last_menu_id="";
                game();
            }
            if (choice == "export")
            {
                file poastfile;
                poastfile.open(DIRECTORY_APPDATA + "tsatria03/ClassicStand/data/stats/daily_summaries.txt", "a");
                poastfile.write("\r\n\r\n"+report);
                poastfile.close();
                dlg("Your daily summary has been exported to data/stats/daily_summeries.txt.");
calculate_new_day_conditions();
writedata();
dlgplay("savegame.ogg");
wait(200);
last_menu_id="";
game();
            }
        }
calculate_new_day_conditions();
last_menu_id="";
game();
    }
void purchase_ingredient_bundle(string bundle_id, string bundle_name, double unit_qty)
{
vd.set_disallowed_chars("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ !@#$%^&*()[]{};:'\"\\|,.<>_?/+-=~", false, "");
string qty_input = vd.input_box("", "How many " + bundle_name + (bundle_name == "booth" ? " bundles" : " bundles") + " would you like to buy?");
if(qty_input == "")
{
buybmenu();
}
double qty = string_to_number(qty_input);
if(qty <= 0)
{
buybmenu();
}
setupmenu(false, "");
m.add_item("Yes", "yes");
m.add_item("No", "no");
m.intro_text = "Would you like to include " + unit_qty + " bags of ice with each bundle?";
int mres = m.run();
bool include_ice = m.get_item_id(mres) == "yes";
setupmenu(false, "");
m.add_item("Yes", "yes");
m.add_item("No", "no");
m.intro_text = "Would you like to include " + unit_qty + " packets of salt with each bundle?";
int mres2 = m.run();
bool include_salt = m.get_item_id(mres) == "yes";
double per_bundle = ((cupcost + lemoncost + sugarcost + watercost) * unit_qty) / 6;
if(include_ice)  per_bundle += icecost * unit_qty;
if(include_salt) per_bundle += saltcost * unit_qty;
double total = per_bundle * qty;
if(cash < total)
{
dlg("Error. You don't have enough cash to purchase " + qty + " " + bundle_name + " bundle" + (qty == 1 ? "" : "s") + " of supplies.");
buybmenu();
}
cash   -= total;
cups   += unit_qty * qty;
if(include_ice) ices += unit_qty * qty;
lemons += unit_qty * qty;
if(include_salt) salts += unit_qty * qty;
sugars += unit_qty * qty;
waters += unit_qty * qty;
pool.play_stationary("buycup" + random(1, 2) + ".ogg", false);
pool.play_stationary("buybag" + random(1, 4) + ".ogg", false);
pool.play_stationary("buyfruit" + random(1, 2) + ".ogg", false);
pool.play_stationary("buypack" + random(1, 2) + ".ogg", false);
pool.play_stationary("buywater" + random(1, 2) + ".ogg", false);
pool.play_stationary("buy" + random(1, 4) + ".ogg", false);
string msg = "Purchase complete. You bought " + qty + " " + bundle_name + " bundle" + (qty == 1 ? "" : "s") + " of supplies for " + convert_to_currency(total) + ".\r\n";
msg += "You received " + (unit_qty * qty) + " empty cups";
if(include_ice)  msg += ", " + (unit_qty * qty) + " bags of ice";
msg += ", " + (unit_qty * qty) + " ripe lemons";
if(include_salt) msg += ", " + (unit_qty * qty) + " packets of salt";
msg += ", " + (unit_qty * qty) + " packets of sugar";
msg += ", and " + (unit_qty * qty) + " liters of water.";
msg += "\r\nYou now have " + convert_to_currency(cash) + " in cash remaining.";
dlgmessage(msg);
wait(500);
buybmenu();
}
void trigger_event(int probability_chance)
{
    if (random(0, 99) >= probability_chance)
        return;
    string[] possible_events;
    if (temprature > 85)
    {
        possible_events.insert_last("free_water");
        possible_events.insert_last("heatstroke");
    }
    else if (temprature < 45)
    {
        possible_events.insert_last("slow_day");
        possible_events.insert_last("ingredient_freeze");
    }
    possible_events.insert_last("thief");
    possible_events.insert_last("lucky_bonus");
    possible_events.insert_last("nothing");
    string event = possible_events[random(0, possible_events.length() - 1)];
    if (event == "free_water")
    {
        double watercount = random(1 * level * daynumber, 5 * level * daynumber);
        waters += watercount;
        pool.play_stationary("buywater" + random(1, 2) + ".ogg", false);
        dlg("It was scorching hot today! A kind neighbor donated " + watercount + " liter" + (watercount == 1 ? "" : "s") + " of water to help your business.");
    }
    else if (event == "heatstroke")
    {
        double cashcount = random(1 * level * daynumber, 5 * level * daynumber);
        cash = max(0, cash - cashcount);
        pool.play_stationary("buy" + random(1, 4) + ".ogg", false);
        dlg("A customer fainted from the heat! You had to pay " + convert_to_currency(cashcount) + " in first aid supplies.");
    }
    else if (event == "slow_day")
    {
        double unsold = min(soldcups, random(1 * level * daynumber, 2 * level * daynumber));
        soldcups -= unsold;
        dlg("It was too chilly. Customers stayed home, and " + unsold + " cup" + (unsold == 1 ? "" : "s") + " went unsold.");
    }
    else if (event == "ingredient_freeze")
    {
        double lost = min(lemons, random(1 * level * daynumber, 2 * level * daynumber));
        lemons -= lost;
        dlg("A cold frost spoiled some of your lemons. You lost " + lost + " lemon" + (lost == 1 ? "" : "s") + ".");
    }
    else if (event == "thief")
    {
        double stolen = min(cash, random(200 * level * daynumber, 400 * level * daynumber));
        cash -= stolen;
        dlg("A thief stole " + convert_to_currency(stolen) + " from your cash box overnight!");
    }
    else if (event == "lucky_bonus")
    {
        double bonus = random(100 * level * daynumber, 200 * level * daynumber);
        cash += bonus;
pool.play_stationary("buy" + random(1, 4) + ".ogg", false);
        dlg("A video of your stand went viral! You got a bonus of " + convert_to_currency(bonus) + ".");
    }
    else if (event == "nothing")
    {
        dlg("Nothing unusual happened today. Just another sunny hour at the stand.");
    }
}
void restart_game(string appid="cst.exe", string scriptid="cst.nvgt")
{
if(SCRIPT_COMPILED)
{
bool success=run(appid,"",false,false);
if(!success)
{
alert("errorr", "Unable to restart "+appid+"!");
}
}
else
{
bool success=run("c:\\nvgt\\nvgtw.exe", scriptid,false,false);
if(!success)
{
alert("errorr", "Unable to restart "+scriptid+"!");
}
}
exit();
}
