void game()
{
while(true)
{
wait(5);
setupmenu();
m.add_item("day "+daynumber+": level "+level+" of "+maxlevel);
m.add_item("Hydration status: "+round(hydration / maxhydration * 100, 0)+" percent.");
int hour = clocktime % 24;
string hour_period = (hour >= 12 && hour < 24) ? "PM" : "AM";
int display_hour = hour % 12;
if(display_hour == 0) display_hour = 12;
m.add_item("Time: " + display_hour + hour_period + ".");
m.add_item("Temprature: "+temprature+" degrees farenheight.");
m.add_item("Cash: " + cash + " dollar" + (cash == 1 ? "" : "s."));
m.add_item("filled cups: " + fullcups);
if(pitcherstat <= 0)
    m.add_item("Pitcher status: 0 liters of lemonade.");
else if(pitcherstat <= 1)
    m.add_item("Pitcher status: 1 liter of lemonade.");
else
    m.add_item("Pitcher status: " + ceil(pitcherstat) + " liters of lemonade.");
m.add_item("Buy cup. You have " + cups + " empty cup" + (cups == 1 ? "" : "s"), "cps");
m.add_item("Buy ice. You have " + ices + " bag" + (ices == 1 ? "" : "s") + " of ice", "ics");
m.add_item("Buy lemon. You have " + lemons + " ripe lemon" + (lemons == 1 ? "" : "s"), "lms");
m.add_item("Buy salt. You have " + salts + " packet" + (salts == 1 ? "" : "s") + " of salt", "slt");
m.add_item("Buy sugar. You have " + sugars + " packet" + (sugars == 1 ? "" : "s") + " of sugar", "sgr");
m.add_item("Buy water. You have " + waters + " liter" + (waters == 1 ? "" : "s") + " of water", "swr");
m.add_item("drink lemonaid", "dlm");
m.add_item("make lemonaid", "mlm");
m.add_item("pour lemonaid", "plm");
m.add_item("sell lemonaid", "slm");
m.add_item("exit game", "ex");
m.add_item("reload game", "rgl");
m.add_item("reset game", "rgm");
m.add_item("save game", "sgm");
m.intro_text = "Lemonaid manager. What would you like to do?";
int mres=m.run();
string main = m.get_selected_item_id();
if(mres==-1)
{
    setupmenu(false);    
    m.add_item("Yes, quit the game without saving", "quit_no_save");
    m.add_item("Yes, save the game and then quit", "quit_save");
    m.add_item("No, continue playing", "continue");
    m.add_item("No, save the game, but continue playing", "save_continue");
m.intro_text = "Are you sure you want to quit? You will lose all progress for this current game session.";
int mres = m.run();
    if(mres==-1)
    {
game();
    }
if (m.get_selected_item_id() == "quit_no_save")
    {
        speak("Exiting the game without saving.");
wait(500);
exit();
    }
if (m.get_selected_item_id() == "quit_save")
    {
        writedata();
        speak("game saved, Exiting.");
wait(500);
exit();
    }
if (m.get_selected_item_id() == "continue")
    {
game();
    }
if (m.get_selected_item_id() == "save_continue")
    {
        writedata();
speak("game saved");
wait(500);
game();
    }
}
if(main == "cps")
{
vd.set_disallowed_chars("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ !@#$%^&*()[]{};:'\"\\|,.<>?/+-=`~", false, "");
    string cup = vd.input_box("", "How many empty cups would you like to buy? Each one costs " + cupcost + " dollar" + (cupcost == 1 ? "" : "s."));
    if(cup == "")
        game();
    double qty = string_to_number(cup);
    if(qty <= 0)
        game();
    double total = qty * cupcost;
    if(cash < total)
    {
        dlg("Error. You don't have enough cash to purchase " + qty + " empty cup" + (qty == 1 ? "" : "s") + ".");
        game();
    }
    cups += qty;
    cash -= total;
pool.play_stationary("buycup" + random(1, 2) + ".ogg", false);
    pool.play_stationary("buy" + random(1, 4) + ".ogg", false);
dlg("Purchase complete. You bought " + qty + " empty cup" + (qty == 1 ? "" : "s") + " for " + total + " dollar" + (total == 1 ? "" : "s") + ". " + "You now have " + cash + " dollar" + (cash == 1 ? "" : "s") + " in cash remaining.");
}
if(main == "ics")
{
vd.set_disallowed_chars("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ !@#$%^&*()[]{};:'\"\\|,.<>?/+-=`~", false, "");
    string ice = vd.input_box("", "How many bags of ice would you like to buy? Each one costs " + icecost + " dollar" + (icecost == 1 ? "" : "s."));
    if(ice == "")
        game();
    double qty = string_to_number(ice);
    if(qty <= 0)
        game();
    double total = qty * icecost;
    if(cash < total)
    {
dlg("Error. You don't have enough cash to purchase " + qty + " bag" + (qty == 1 ? "" : "s") + " of ice.");
        game();
    }
    ices += qty;
    cash -= total;
pool.play_stationary("buybag" + random(1, 4) + ".ogg", false);
    pool.play_stationary("buy" + random(1, 4) + ".ogg", false);
dlg("Purchase complete. You bought " + qty + " bag" + (qty == 1 ? "" : "s") + " of ice for " + total + " dollar" + (total == 1 ? "" : "s") + ". You now have " + cash + " dollar" + (cash == 1 ? "" : "s") + " in cash remaining.");
}
if(main == "lms")
{
vd.set_disallowed_chars("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ !@#$%^&*()[]{};:'\"\\|,.<>?/+-=`~", false, "");
    string lemon = vd.input_box("", "How many ripe lemons would you like to buy? Each one costs " + lemoncost + " dollar" + (lemoncost == 1 ? "" : "s."));
    if(lemon == "")
        game();
    double qty = string_to_number(lemon);
    if(qty <= 0)
        game();
    double total = qty * lemoncost;
    if(cash < total)
    {
        dlg("Error. You don't have enough cash to purchase " + qty + " ripe lemon" + (qty == 1 ? "" : "s") + ".");
        game();
    }
    lemons += qty;
    cash -= total;
pool.play_stationary("buyfruit" + random(1, 2) + ".ogg", false);
    pool.play_stationary("buy" + random(1, 4) + ".ogg", false);
dlg("Purchase complete. You bought " + qty + " ripe lemon" + (qty == 1 ? "" : "s") + " for " + total + " dollar" + (total == 1 ? "" : "s") + ". " + "You now have " + cash + " dollar" + (cash == 1 ? "" : "s") + " in cash remaining.");
}
if(main == "slt")
{
vd.set_disallowed_chars("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ !@#$%^&*()[]{};:'\"\\|,.<>?/+-=`~", false, "");
    string salt = vd.input_box("", "How many packets of salt would you like to buy? Each one costs " + saltcost + " dollar" + (saltcost == 1 ? "" : "s."));
    if(salt == "")
        game();
    double qty = string_to_number(salt);
    if(qty <= 0)
        game();
    double total = qty * saltcost;
    if(cash < total)
    {
dlg("Error. You don't have enough cash to purchase " + qty + " packet" + (qty == 1 ? "" : "s") + " of salt.");
        game();
    }
    salts += qty;
    cash -= total;
pool.play_stationary("buypack" + random(1, 2) + ".ogg", false);
    pool.play_stationary("buy" + random(1, 4) + ".ogg", false);
dlg("Purchase complete. You bought " + qty + " packet" + (qty == 1 ? "" : "s") + " of salt for " + total + " dollar" + (total == 1 ? "" : "s") + ". You now have " + cash + " dollar" + (cash == 1 ? "" : "s") + " in cash remaining.");
}
if(main == "sgr")
{
vd.set_disallowed_chars("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ !@#$%^&*()[]{};:'\"\\|,.<>?/+-=`~", false, "");
    string sugar = vd.input_box("", "How many packets of sugar would you like to buy? Each one costs " + sugarcost + " dollar" + (sugarcost == 1 ? "" : "s."));
    if(sugar == "")
        game();
    double qty = string_to_number(sugar);
    if(qty <= 0)
        game();
    double total = qty * sugarcost;
    if(cash < total)
    {
dlg("Error. You don't have enough cash to purchase " + qty + " packet" + (qty == 1 ? "" : "s") + " of sugar.");
        game();
    }
    sugars += qty;
    cash -= total;
pool.play_stationary("buypack" + random(1, 2) + ".ogg", false);
    pool.play_stationary("buy" + random(1, 4) + ".ogg", false);
dlg("Purchase complete. You bought " + qty + " packet" + (qty == 1 ? "" : "s") + " of sugar for " + total + " dollar" + (total == 1 ? "" : "s") + ". You now have " + cash + " dollar" + (cash == 1 ? "" : "s") + " in cash remaining.");
}
if(main == "swr")
{
vd.set_disallowed_chars("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ !@#$%^&*()[]{};:'\"\\|,.<>?/+-=`~", false, "");
    string water = vd.input_box("", "How many liters of water would you like to buy? Each one costs " + watercost + " dollar" + (watercost == 1 ? "" : "s."));
    if(water == "")
        game();
    double qty = string_to_number(water);
    if(qty <= 0)
        game();
    double total = qty * watercost;
    if(cash < total)
    {
dlg("Error. You don't have enough cash to purchase " + qty + " liter" + (qty == 1 ? "" : "s") + " of water.");
        game();
    }
    waters += qty;
    cash -= total;
pool.play_stationary("buywater" + random(1, 2) + ".ogg", false);
    pool.play_stationary("buy" + random(1, 4) + ".ogg", false);
dlg("Purchase complete. You bought " + qty + " liter" + (qty == 1 ? "" : "s") + " of water for " + total + " dollar" + (total == 1 ? "" : "s") + ". You now have " + cash + " dollar" + (cash == 1 ? "" : "s") + " in cash remaining.");
}
if(main == "dlm")
{
    if(fullcups <= 0)
    {
        dlg("Error. You donâ€™t have any lemonade to drink. Please make and pour some first.");
        game();
    }
    double maxdrink = min(fullcups, ceil((maxhydration - hydration) / 100.0));
    if(maxdrink <= 0)
    {
        dlg("Error. You're already fully hydrated. You don't need to drink any lemonade right now.");
        game();
    }
    vd.set_disallowed_chars("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ !@#$%^&*()[]{};:'\"\\|,.<>?/+-=`~", false, "");
    string cupsinput = vd.input_box("", "How many cups of lemonade would you like to drink? Each cup of lemonade will increase your hydration by 1 to 5 percent.");
    if(cupsinput == "")
        game();
    double drinkcount = string_to_number(cupsinput);
    if(drinkcount <= 0)
    {
        dlg("Error. Invalid number of cups entered.");
        game();
    }
    if(drinkcount > maxdrink)
    {
        dlg("Error. You can't drink that many cups of lemonade.");
        game();
    }
    fullcups -= drinkcount;
    double min_increase = 100.0;
    double max_increase = 500.0;
    double total_increase = 0;
    double tmpcount = drinkcount;
    while (tmpcount > 0)
    {
        double single = random(min_increase, max_increase);
        if (hydration + single > maxhydration)
        {
            single = maxhydration - hydration - total_increase;
            if(single < 0) single = 0;
        }
        total_increase += single;
        tmpcount -= 1;
    }
    hydration += total_increase;
    if(hydration > maxhydration) hydration = maxhydration;
    double percent_increase = round((total_increase / maxhydration) * 100, 0);
    speak("Drinking " + drinkcount + " cup" + (drinkcount == 1 ? "" : "s") + " of lemonade. Please wait.");
    dlgplay("drinkcup" + random(1, 2) + ".ogg");
    dlg("Success. You drank " + drinkcount + " cup" + (drinkcount == 1 ? "" : "s") + " of lemonade. Your hydration has been increased by " + percent_increase + " percent.");
}
if(main == "mlm")
{
    if(cups < 1 || ices < 1 || lemons < 1 || salts < 1 || sugars < 1 || waters < 1)
    {
        dlg("Error. You need at least one of every ingredient and a cup to make lemonade.");
        game();
    }
vd.set_disallowed_chars("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ !@#$%^&*()[]{};:'\"\\|,.<>?/+-=`~", false, "");
    string input = vd.input_box("", "How many cups of lemonade would you like to make?");
    if(input == "") game();
    double cupcount = string_to_number(input);
    if(cupcount <= 0)
        game();
    if(cupcount > cups)
    {
        dlg("Error. You don't have enough cups. You only have " + cups + ".");
        game();
    }
    if(ices < cupcount || lemons < cupcount || salts < cupcount || sugars < cupcount || waters < cupcount)
    {
        dlg("Error. You don't have enough ingredients to make "+cupcount+" cups of lemonade.");
        game();
    }
    cups -= cupcount;
ices -= cupcount;
    lemons -= cupcount;
    salts -= cupcount;
    sugars -= cupcount;
    waters -= cupcount;
    pitcher = 1;
    pitcherstat += cupcount * 0.25;
speak("Mixing... Please wait.");
    pool.play_stationary("makestart.ogg", false);
dlgplay("makeloop.ogg");
pool.play_stationary("makestop.ogg", false);
    dlg("Success. You made " + cupcount + " cup" + (cupcount == 1 ? "" : "s") + " of lemonade and added it to the pitcher.");
}
if(main == "plm")
{
    if(pitcher < 1 || pitcherstat <= 0)
    {
        dlg("Error. The pitcher is currently empty. Please make some lemonade first to pour into a cup.");
        game();
    }
    double maxcups = floor(pitcherstat / 0.25);
    if(maxcups < 1)
    {
        dlg("Error. The pitcher doesn't have enough lemonade to pour a single cup.");
        game();
    }
vd.set_disallowed_chars("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ !@#$%^&*()[]{};:'\"\\|,.<>?/+-=`~", false, "");
    string input = vd.input_box("", "How many cups would you like to pour from the pitcher? You can pour up to " + maxcups + ".");
    if(input == "") game();
    double pourcount = string_to_number(input);
    if(pourcount <= 0) game();
    if(pourcount > maxcups)
    {
        dlg("Error. You can't pour more than " + maxcups + " cup" + (maxcups == 1 ? "" : "s") + " of lemonade out of the pitcher.");
        game();
    }
    pitcherstat -= pourcount * 0.25;
    fullcups += pourcount;
    if(pitcherstat <= 0)
    {
        pitcherstat = 0;
        pitcher = 0;
    }
speak("Pouring... Please wait.");
dlgplay("pourcup"+random(1 ,4)+".ogg");
    dlg("Success. You poured " + pourcount + " cup" + (pourcount == 1 ? "" : "s") + " of lemonade into sellable serving cups.");
}
if(main == "slm")
{
    if(fullcups <= 0)
    {
        dlg("Error. You need at least one cup of lemonade made in order to sell it for cash.");
game();
    }
vd.set_disallowed_chars("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ !@#$%^&*()[]{};:'\"\\|,.<>?/+-=`~", false, "");
    string price = vd.input_box("", "What price would you like to sell each cup of lemonade for?");
    if(price == "")
        game();
    double percup = string_to_number(price);
    if(percup <= 0)
    {
        dlg("Error. Invalid price entered.");
        game();
    }
    double total = percup * fullcups;
    cash += total;
    pool.play_stationary("buy" + random(1, 4) + ".ogg", false);
    dlg("Congratulations! You earned " + total + " dollar" + (total == 1 ? "" : "s") + " for selling " + fullcups + " cup" + (fullcups == 1 ? "" : "s") + " of lemonade.");
    fullcups = 0;
    clocktime += 4;
    level += 1;
    if(level > 6)
    {
string report = "Daily Summary for day " + daynumber + ".\r\n";
report += "You ended the day with " + cash + " dollar" + (cash == 1 ? "" : "s") + " in cash.\r\n";
report += "Your inventory:\r\n";
report += "- Empty cups: " + cups + "\r\n";
report += "- Bags of ice: " + ices + "\r\n";
report += "- Ripe lemons: " + lemons + "\r\n";
report += "- Packets of salt: " + salts + "\r\n";
report += "- Packets of sugar: " + sugars + "\r\n";
report += "- Liters of water: " + waters + "\r\n";
if(pitcherstat > 0)
    report += "You also have " + ceil(pitcherstat) + " liters of lemonade in your pitcher.";
else
    report += "Your pitcher is currently empty.";
dlgmessage(report);
        level = 1;
        daynumber += 1;
clocktime = 0;
        setupmenu();
        m.add_item("Copy daily summery to clipboard", "copy");
        m.add_item("Export daily summery to file", "export");
        m.add_item("Return to the game.", "cancel");
        m.intro_text = "What would you like to do with the current daily summery for this game session?";
        int res = m.run();
        string choice = m.get_selected_item_id();
        if (res != -1)
        {
            if (choice == "copy")
            {
                clipboard_copy_text(report);
                dlg("Your daily summery has been copied to your clipboard.");
    int daily_min = clamp(20 + daynumber * 1, 20, 90);
int daily_max = clamp(70 + daynumber * 2, 70, 120);
if(level == 1)
    temprature = random(daily_min, daily_min + 5);
else if(level == 2)
    temprature = random(daily_min + 5, daily_min + 15);
else if(level == 3)
    temprature = random(daily_min + 15, daily_max - 15);
else if(level == 4)
    temprature = random(daily_max - 10, daily_max);
else if(level == 5)
    temprature = random(daily_max - 20, daily_max - 5);
else
    temprature = random(daily_min + 5, daily_min + 15);
double daily_base = temprature - 60;
double percent = daily_base * 0.005 + level * 0.01 + daynumber * 0.005;
percent = clamp(percent, 0.01, 0.1);
double rounded_percent = round(percent * 100, 0);
double hydration_loss = (rounded_percent / 100.0) * maxhydration;
hydration = max(hydration - hydration_loss, 0);
cupcost   = 1 * level * daynumber;
icecost   = 2 * level * daynumber;
lemoncost = 3 * level * daynumber;
saltcost  = 4 * level * daynumber;
sugarcost = 5 * level * daynumber;
watercost = 6 * level * daynumber;
                game();
            }
            else if (choice == "export")
            {
                file poastfile;
                poastfile.open("data/stats/daily_summeries.txt", "a");
                poastfile.write("\r\n\r\n"+report);
                poastfile.close();
                dlg("Your daily summery has been exported to data/stats/daily_summeries.txt.");
    int daily_min = clamp(20 + daynumber * 1, 20, 90);
int daily_max = clamp(70 + daynumber * 2, 70, 120);
if(level == 1)
    temprature = random(daily_min, daily_min + 5);
else if(level == 2)
    temprature = random(daily_min + 5, daily_min + 15);
else if(level == 3)
    temprature = random(daily_min + 15, daily_max - 15);
else if(level == 4)
    temprature = random(daily_max - 10, daily_max);
else if(level == 5)
    temprature = random(daily_max - 20, daily_max - 5);
else
    temprature = random(daily_min + 5, daily_min + 15);
double daily_base = temprature - 60;
double percent = daily_base * 0.005 + level * 0.01 + daynumber * 0.005;
percent = clamp(percent, 0.01, 0.1);
double rounded_percent = round(percent * 100, 0);
double hydration_loss = (rounded_percent / 100.0) * maxhydration;
hydration = max(hydration - hydration_loss, 0);
cupcost   = 1 * level * daynumber;
icecost   = 2 * level * daynumber;
lemoncost = 3 * level * daynumber;
saltcost  = 4 * level * daynumber;
sugarcost = 5 * level * daynumber;
watercost = 6 * level * daynumber;
                game();
            }
        }
    }
    int daily_min = clamp(20 + daynumber * 1, 20, 90);
int daily_max = clamp(70 + daynumber * 2, 70, 120);
if(level == 1)
    temprature = random(daily_min, daily_min + 5);
else if(level == 2)
    temprature = random(daily_min + 5, daily_min + 15);
else if(level == 3)
    temprature = random(daily_min + 15, daily_max - 15);
else if(level == 4)
    temprature = random(daily_max - 10, daily_max);
else if(level == 5)
    temprature = random(daily_max - 20, daily_max - 5);
else
    temprature = random(daily_min + 5, daily_min + 15);
double daily_base = temprature - 60;
double percent = daily_base * 0.005 + level * 0.01 + daynumber * 0.005;
percent = clamp(percent, 0.01, 0.1);
double rounded_percent = round(percent * 100, 0);
double hydration_loss = (rounded_percent / 100.0) * maxhydration;
hydration = max(hydration - hydration_loss, 0);
cupcost   = 1 * level * daynumber;
icecost   = 2 * level * daynumber;
lemoncost = 3 * level * daynumber;
saltcost  = 4 * level * daynumber;
sugarcost = 5 * level * daynumber;
watercost = 6 * level * daynumber;
}
if(main=="ex")
{
    setupmenu(false);    
    m.add_item("Yes, quit the game without saving", "quit_no_save");
    m.add_item("Yes, save the game and then quit", "quit_save");
    m.add_item("No, continue playing", "continue");
    m.add_item("No, save the game, but continue playing", "save_continue");
m.intro_text = "Are you sure you want to quit? You will lose all progress for this current game session.";
int mres = m.run();
    if(mres==-1)
    {
game();
    }
if (m.get_selected_item_id() == "quit_no_save")
    {
        speak("Exiting the game without saving.");
wait(500);
exit();
    }
if (m.get_selected_item_id() == "quit_save")
    {
        writedata();
        speak("game saved, Exiting.");
wait(500);
exit();
    }
if (m.get_selected_item_id() == "continue")
    {
game();
    }
if (m.get_selected_item_id() == "save_continue")
    {
        writedata();
speak("game saved");
wait(500);
game();
    }
}
if(main=="rgl")
{
readdata();
speak("game reloaded");
wait(500);
game();
}
if(main=="rgm")
{
setupmenu();
    m.add_item("Yes", "yes");
    m.add_item("No", "no");
m.intro_text="Are you sure you want to reset all of your game's progress?";
int mres=m.run();
string confirm = m.get_selected_item_id();
    if (mres == -1 or confirm == "no")
    {
        game();
    }
if(confirm=="yes")
{
if(file_exists("data/saves/game.clm")) file_delete("data/saves/game.clm");
if(file_exists("data/stats/daily_summeries.txt")) file_delete("data/stats/daily_summeries.txt");
resetgame();
dlg("Success. Your game progress has been reset.");
game();
}
}
if(main=="sgm")
{
writedata();
speak("game saved");
wait(500);
game();
}
}
}
